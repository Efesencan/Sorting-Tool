{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getHeapSortAnimations","n","heapify","temp","heapSortHelper","arr","largest","l","r","console","log","getQuickSortAnimations","quickSortHelper","low","high","pi","pivot","partition","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","num","check","bubbleSortHelper","getBubbleSortAnimations","index","selectionSortHelper","getSelectionSortAnimations","insertionSortHelper","getInsertionSortAnimations","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","ButtonToolbar","Button","onClick","size","mergeSort","quickSort","heapSort","bubbleSort","selectionSort","insertionSort","map","value","idx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECLJ,SAASgB,EAAsBjB,GAClC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAKhC,SAAwBM,EAAUL,GAEhC,IADA,IAAIiB,EAAIZ,EAAUJ,OACVW,EAAKK,EAAI,EAAI,EAAGL,GAAI,EAAGA,IAC3BM,EAAQb,EAAUY,EAAEL,EAAEZ,GAE1B,IAAK,IAAIY,EAAEK,EAAE,EAAGL,GAAG,EAAGA,IACtB,CAGIZ,EAAWc,KAAK,CAAC,EAAEF,EAAE,IACrB,IAAIO,EAAOd,EAAU,GACrBA,EAAU,GAAKA,EAAUO,GACzBP,EAAUO,GAAKO,EAEfD,EAAQb,EAAWO,EAAG,EAAEZ,IAlB5BoB,CAAerB,EAAOC,GACfA,GAqBX,SAASkB,EAAQG,EAAIJ,EAAEL,EAAEZ,GACrB,IAAIsB,EAAUV,EACVW,EAAI,EAAEX,EAAI,EACVY,EAAI,EAAEZ,EAAI,EA0Bd,GAtBGW,EAAEN,IACDjB,EAAWc,KAAK,CAACS,EAAED,EAAQ,IAC3BtB,EAAWc,KAAK,CAACS,EAAED,EAAQ,KAG3BC,EAAIN,GAAKI,EAAIE,GAAKF,EAAIC,KACtBA,EAAUC,GAKXC,EAAIP,IACHjB,EAAWc,KAAK,CAACU,EAAEF,EAAQ,IAC3BtB,EAAWc,KAAK,CAACU,EAAEF,EAAQ,KAE3BE,EAAIP,GAAKI,EAAIG,GAAKH,EAAIC,KACtBA,EAAUE,GAGdxB,EAAWc,KAAK,CAACF,EAAEU,EAAQ,IAC3BtB,EAAWc,KAAK,CAACF,EAAEU,EAAQ,IAC3BG,QAAQC,IAAId,EAAE,IAAIU,GACdA,IAAYV,EAChB,CAEIZ,EAAWc,KAAK,CAACF,EAAEU,EAAQ,IAC3B,IAAIH,EAAOE,EAAIT,GACfS,EAAIT,GAAKS,EAAIC,GACbD,EAAIC,GAAWH,EAIfD,EAAQG,EAAKJ,EAAGK,EAAQtB,IChEzB,SAAS2B,EAAuB5B,GACnC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAKhC,SAAS6B,EAAgBP,EAAIQ,EAAIC,EAAK9B,GAClC,GAAI6B,EAAMC,EAAM,CAGZ,IAAIC,EAQV,SAAmBV,EAAIQ,EAAIC,EAAK9B,GAG5B,IAFA,IAAIgC,EAAQX,EAAIS,GACZlB,EAAKiB,EAAM,EACNhB,EAAIgB,EAAKhB,GAAKiB,EAAO,EAAGjB,IAK7B,GAFAb,EAAWc,KAAK,CAACD,EAAEiB,EAAK,IACxB9B,EAAWc,KAAK,CAACD,EAAEiB,EAAK,IACpBT,EAAIR,GAAKmB,EAAO,CAChBpB,IAEAZ,EAAWc,KAAK,CAACF,EAAEC,EAAE,IACrB,IAAIM,EAAOE,EAAIT,GACfS,EAAIT,GAAKS,EAAIR,GACbQ,EAAIR,GAAKM,EAIjBnB,EAAWc,KAAK,CAACF,EAAE,EAAEkB,EAAK,IAC1B,IAAIX,EAAOE,EAAIT,EAAE,GAGjB,OAFAS,EAAIT,EAAE,GAAKS,EAAIS,GACfT,EAAIS,GAAQX,EACJP,EAAI,EA9BDqB,CAAUZ,EAAKQ,EAAKC,EAAM9B,GAGnC4B,EAAgBP,EAAKQ,EAAKE,EAAK,EAAG/B,GAClC4B,EAAgBP,EAAKU,EAAK,EAAGD,EAAM9B,IAZzC4B,CAAgB7B,EAAO,EAAGA,EAAME,OAAQ,EAAED,GACnCA,G,oCCkBUkC,G,wBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXrC,MAAO,IAJQ,E,iFASjBsC,KAAKC,e,mCAKL,IADA,IAwR2BC,EAAKC,EAxR1BzC,EAAQ,GACLa,EAAI,EAAGA,EAvBS,GAuBiBA,IACxCb,EAAMe,MAsRmByB,EAtRQ,EAsRHC,EAtRM,IAwRjC/B,KAAKC,MAAMD,KAAKgC,UAAYD,EAAMD,EAAM,GAAKA,KAtRlDF,KAAKK,SAAS,CAAC3C,Y,kCAKf,IADA,IAAMC,EAAaF,EAAuBuC,KAAKD,MAAMrC,OAD3C,WAEDa,GACP,IAAM+B,EAAYC,SAASC,uBAAuB,aAElD,GADsBjC,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACVkC,EADU,KACCC,EADD,KAEXC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQvC,EAAI,IAAM,EAhCR,MAHF,YAoCdwC,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA5Cb,EA6ChBvC,QAEHwC,YAAW,WAAO,IAAD,cACgBpD,EAAWY,GAD3B,GACRkC,EADQ,KACGQ,EADH,KAEKX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QAlDiB,EAmDhB1C,IAjBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCAyBT,IADA,IAAMZ,EAAa2B,EAAuBU,KAAKD,MAAMrC,OAF3C,WAGDa,GACP,IAAM+B,EAAYC,SAASC,uBAAuB,aAElD,GADsB7C,EAAWY,GAAG,GACjB,CAAC,IAAD,cACkBZ,EAAWY,GAD7B,GACVkC,EADU,KACCC,EADD,KACWS,EADX,KAEXR,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAgB,IAARK,EAzDE,MAHF,YA6DdJ,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IArEb,EAsEhBvC,QAEHwC,YAAW,WAAO,IAAD,cACoBpD,EAAWY,GAD/B,GACRkC,EADQ,KACGQ,EADH,KAEXN,GAFW,KAEGL,EAAUG,GAAWG,OACnCC,EAAcP,EAAUW,GAAWL,MACnC9B,EAAO6B,EAAYO,OAGvBP,EAAYO,OAASL,EAAYK,OACjCL,EAAYK,OAASpC,IAhFJ,EAiFhBP,IAtBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,iCA8BT,IADA,IAAMZ,EAAagB,EAAsBqB,KAAKD,MAAMrC,OAF3C,WAGAa,GACP,IAAM+B,EAAYC,SAASC,uBAAuB,aAElD,GADsB7C,EAAWY,GAAG,GACjB,CAAC,IAAD,cACkBZ,EAAWY,GAD7B,GACVkC,EADU,KACCC,EADD,KACWS,EADX,KAEXR,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAgB,IAARK,EAvFE,MAHF,YA2FdJ,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAnGb,EAoGhBvC,QAEHwC,YAAW,WAAO,IAAD,cACoBpD,EAAWY,GAD/B,GACRkC,EADQ,KACGQ,EADH,KAEXN,GAFW,KAEGL,EAAUG,GAAWG,OACnCC,EAAcP,EAAUW,GAAWL,MACnC9B,EAAO6B,EAAYO,OAGvBP,EAAYO,OAASL,EAAYK,OACjCL,EAAYK,OAASpC,IA9GJ,EA+GhBP,IAtBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,mCA8BT,IADA,IAAMZ,ECjIH,SAAiCD,GACpC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAKhC,SAA0BM,EAAUL,GAElC,IADA,IAAIyD,GAAQ,EACJ7C,EAAI,EAAGA,EAAEP,EAAUJ,QAAUwD,EAAO7C,IAAI,CAC5C6C,GAAQ,EACR,IAAI,IAAI5C,EAAI,EAAGA,EAAER,EAAUJ,OAAQ,EAAGW,EAAIC,IAGxC,GAFAb,EAAWc,KAAK,CAACD,EAAGA,EAAE,EAAE,IACxBb,EAAWc,KAAK,CAACD,EAAGA,EAAE,EAAE,IACrBR,EAAUQ,GAAKR,EAAUQ,EAAE,GAAG,CAC/B4C,GAAQ,EACRzD,EAAWc,KAAK,CAACD,EAAEA,EAAE,EAAE,IACvB,IAAIM,EAAOd,EAAUQ,GACrBR,EAAUQ,GAAKR,EAAUQ,EAAE,GAC3BR,EAAUQ,EAAE,GAAKM,IAhBzBuC,CAAiB3D,EAAOC,GACjBA,GD6HY2D,CAAwBtB,KAAKD,MAAMrC,OAF3C,WAGFa,GACP,IAAM+B,EAAYC,SAASC,uBAAuB,aAElD,GADsB7C,EAAWY,GAAG,GACjB,CAAC,IAAD,cACkBZ,EAAWY,GAD7B,GACVkC,EADU,KACCC,EADD,KACWS,EADX,KAEXR,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAgB,IAARK,EArHE,MAHF,YAyHdJ,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAjIb,EAkIhBvC,QAEHwC,YAAW,WAAO,IAAD,cACoBpD,EAAWY,GAD/B,GACRkC,EADQ,KACGQ,EADH,KAEXN,GAFW,KAEGL,EAAUG,GAAWG,OACnCC,EAAcP,EAAUW,GAAWL,MACnC9B,EAAO6B,EAAYO,OAGvBP,EAAYO,OAASL,EAAYK,OACjCL,EAAYK,OAASpC,IA5IJ,EA6IhBP,IAtBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,sCA6BT,IADA,IAAMZ,EE9JH,SAAoCD,GACvC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAKhC,SAA6BA,EAAMC,GAE7B,IAAI,IAAIY,EAAI,EAAGA,EAAEb,EAAME,OAAQW,IAAI,CAG/B,IAFA,IAAI2B,EAAMxC,EAAMa,GACZgD,EAAQhD,EACJC,EAAID,EAAE,EAAGC,EAAEd,EAAME,OAAQY,IAC7Bb,EAAWc,KAAK,CAACD,EAAE+C,EAAM,IACzB5D,EAAWc,KAAK,CAACD,EAAE+C,EAAM,IACtB7D,EAAMc,GAAK0B,IACVA,EAAMxC,EAAMc,GACZ+C,EAAQ/C,GAIhBb,EAAWc,KAAK,CAACF,EAAEgD,EAAM,IACzB,IAAIzC,EAAOpB,EAAMa,GACjBb,EAAMa,GAAK2B,EACXxC,EAAM6D,GAASzC,GArBvB0C,CAAoB9D,EAAOC,GACpBA,GF0JY8D,CAA2BzB,KAAKD,MAAMrC,OAD5C,WAEJa,GACP,IAAM+B,EAAYC,SAASC,uBAAuB,aAElD,GADsB7C,EAAWY,GAAG,GACjB,CAAC,IAAD,cACkBZ,EAAWY,GAD7B,GACVkC,EADU,KACCC,EADD,KACWS,EADX,KAEXR,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAgB,IAARK,EAlJE,MAHF,YAsJdJ,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA9Jb,EA+JhBvC,QAEHwC,YAAW,WAAO,IAAD,cACoBpD,EAAWY,GAD/B,GACRkC,EADQ,KACGQ,EADH,KAEXN,GAFW,KAEGL,EAAUG,GAAWG,OACnCC,EAAcP,EAAUW,GAAWL,MACnC9B,EAAO6B,EAAYO,OAGvBP,EAAYO,OAASL,EAAYK,OACjCL,EAAYK,OAASpC,IAzKJ,EA0KhBP,IAtBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,sCA6BT,IADA,IAAMZ,EG3LH,SAAoCD,GACvC,IAAMC,EAAa,GACnB,OAAID,EAAME,QAAU,EAAUF,GAKhC,SAA6BA,EAAMC,GAC7B,IAAI,IAAIY,EAAI,EAAGA,EAAEb,EAAME,OAAO,EAAGW,IAC7B,IAAI,IAAIC,EAAID,EAAE,EAAGC,GAAG,IAChBb,EAAWc,KAAK,CAACD,EAAEA,EAAE,EAAE,IACvBb,EAAWc,KAAK,CAACD,EAAEA,EAAE,EAAE,IACpBd,EAAMc,GAAKd,EAAMc,EAAE,IAHHA,IAAI,CAKnBb,EAAWc,KAAK,CAACD,EAAEA,EAAE,EAAE,IACvB,IAAIM,EAAOpB,EAAMc,GACjBd,EAAMc,GAAKd,EAAMc,EAAE,GACnBd,EAAMc,EAAE,GAAKM,GAd7B4C,CAAoBhE,EAAOC,GACpBA,GHuLYgE,CAA2B3B,KAAKD,MAAMrC,OAD5C,WAEJa,GACP,IAAM+B,EAAYC,SAASC,uBAAuB,aAElD,GADsB7C,EAAWY,GAAG,GACjB,CAAC,IAAD,cACkBZ,EAAWY,GAD7B,GACVkC,EADU,KACCC,EADD,KACWS,EADX,KAEXR,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAgB,IAARK,EA/KE,MAHF,YAmLdJ,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA3Lb,EA4LhBvC,QAEHwC,YAAW,WAAO,IAAD,cACoBpD,EAAWY,GAD/B,GACRkC,EADQ,KACGQ,EADH,KAEXN,GAFW,KAEGL,EAAUG,GAAWG,OACnCC,EAAcP,EAAUW,GAAWL,MACnC9B,EAAO6B,EAAYO,OAGvBP,EAAYO,OAASL,EAAYK,OACjCL,EAAYK,OAASpC,IAtMJ,EAuMhBP,IAtBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,+BA4CD,IAAD,OACAb,EAASsC,KAAKD,MAAdrC,MAEP,OACE,6BACI,kBAACkE,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACjD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,2BACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAK1C,cAAc+B,QAAQ,kBAAkBY,KAAK,MAAzE,wBAKZ,kBAACL,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKE,aAAab,QAAQ,iBAAiBY,KAAK,MAAvE,gBAKZ,kBAACL,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKG,aAAad,QAAQ,kBAAkBY,KAAK,MAAxE,gBAKZ,kBAACL,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKI,YAAYf,QAAQ,eAAeY,KAAK,MAApE,eAKZ,kBAACL,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKK,cAAchB,QAAQ,gBAAgBY,KAAK,MAAvE,iBAKZ,kBAACL,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKM,iBAAiBjB,QAAQ,kBAAkBY,KAAK,MAA5E,oBAKZ,kBAACL,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKO,iBAAiBlB,QAAQ,kBAAkBY,KAAK,MAA5E,sBAOtB,yBAAKJ,UAAU,mBACd9E,EAAMyF,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEb,UAAU,YACVc,IAAKD,EACLzC,MAAO,CACLI,gBAzRM,YA0RNE,OAAO,GAAD,OAAKkC,EAAL,kB,GArRyBG,IAAMC,Y,MINtCC,MAXf,WACE,OACE,yBAAKjB,UAAU,OAGb,kBAAC,EAAD,QCEckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQzD,SAAS0D,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d2d7298.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  ","export function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    heapSortHelper(array, animations);\r\n    return animations;\r\n  }\r\n\r\n  function heapSortHelper(mainArray,animations){\r\n    var n = mainArray.length;\r\n    for(let i = (n / 2) -1; i>= 0; i--){\r\n        heapify(mainArray,n,i,animations);\r\n    }\r\n    for (let i=n-1; i>=0; i--) \r\n    { \r\n        // Move current root to end \r\n        // swap operations\r\n        animations.push([0,i,0]);\r\n        let temp = mainArray[0];\r\n        mainArray[0] = mainArray[i];\r\n        mainArray[i] = temp; \r\n        // call max heapify on the reduced heap \r\n        heapify(mainArray, i, 0,animations); \r\n    } \r\n}\r\n\r\nfunction heapify(arr,n,i,animations){\r\n    let largest = i; // Initialize largest as root \r\n    let l = 2*i + 1; // left = 2*i + 1 \r\n    let r = 2*i + 2; // right = 2*i + 2 \r\n  \r\n    // If left child is larger than root\r\n    \r\n    if(l<n){\r\n        animations.push([l,largest,1]); // comparing values\r\n        animations.push([l,largest,2]); // revert colors\r\n    }\r\n    //console.log(l,\" \",largest);\r\n    if (l < n && arr[l] > arr[largest]) \r\n        largest = l; \r\n  \r\n    // If right child is larger than largest so far\r\n    \r\n    //console.log(r,\" \",largest); \r\n    if(r < n){\r\n        animations.push([r,largest,1]); // comparing values\r\n        animations.push([r,largest,2]);\r\n    }\r\n    if (r < n && arr[r] > arr[largest]) \r\n        largest = r; \r\n  \r\n    // If largest is not root\r\n    animations.push([i,largest,1]); // comparing values\r\n    animations.push([i,largest,2]);\r\n    console.log(i,\" \",largest);  \r\n    if (largest !== i) \r\n    {\r\n        // swap operations \r\n        animations.push([i,largest,0]); \r\n        let temp = arr[i];\r\n        arr[i] = arr[largest];\r\n        arr[largest] = temp; \r\n        //swap(arr[i], arr[largest]); \r\n  \r\n        // Recursively heapify the affected sub-tree \r\n        heapify(arr, n, largest,animations); \r\n    } \r\n}","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quickSortHelper(array, 0, array.length -1,animations);\r\n    return animations;\r\n  }\r\n\r\n  function quickSortHelper(arr,low,high,animations){\r\n      if (low < high) {\r\n          /* pi is partitioning index, arr[p] is now  \r\n          at right place */\r\n          let pi = partition(arr, low, high, animations);\r\n          // Separately sort elements before  \r\n          // partition and after partition  \r\n          quickSortHelper(arr, low, pi - 1, animations);\r\n          quickSortHelper(arr, pi + 1, high, animations);\r\n      } \r\n    }\r\n\r\n    function partition(arr,low,high,animations){\r\n        let pivot = arr[high]; // choosing last element as pivot\r\n        let i = (low - 1); // Index of smaller element  \r\n        for (let j = low; j <= high - 1; j++)\r\n        {\r\n            // If current element is smaller than the pivot\r\n            animations.push([j,high,1]);  // compare\r\n            animations.push([j,high,2]);  // revert colors\r\n            if (arr[j] < pivot) {\r\n                i++; // increment index of smaller element  \r\n                //swap(& arr[i], & arr[j]);\r\n                animations.push([i,j,0]); // swap values\r\n                let temp = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = temp; \r\n            }\r\n        }\r\n        //swap(& arr[i + 1], & arr[high]);\r\n        animations.push([i+1,high,0]); // swap pivot with index i+1\r\n        let temp = arr[i+1];\r\n        arr[i+1] = arr[high];\r\n        arr[high] = temp; \r\n        return (i + 1); \r\n    }\r\n\r\n    ","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSort.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js';\r\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSort.js';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSort.js';\r\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/selectionSort.js';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/insertionSort.js';\r\nimport { Navbar, NavItem, NavDropdown, MenuItem, Nav,Form,FormControl,Button,ButtonToolbar } from 'react-bootstrap';\r\nimport './SortingVisualizer.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 3;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 50;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 500));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = animations[i][2];\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx,num] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = num === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight,num] = animations[i];\r\n          let barOneStyle = arrayBars[barOneIdx].style;\r\n          let barTwoStyle = arrayBars[newHeight].style;\r\n          let temp = barOneStyle.height;\r\n          //console.log(\"First index: \"+barOneIdx+\" First val: \"+temp + \" Second index: \"+newHeight + \" Second val: \" + barTwoStyle.height);\r\n          //console.log(temp,newHeight);\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = temp;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = animations[i][2];\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx,num] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = num === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight,num] = animations[i];\r\n          let barOneStyle = arrayBars[barOneIdx].style;\r\n          let barTwoStyle = arrayBars[newHeight].style;\r\n          let temp = barOneStyle.height;\r\n          //console.log(\"First index: \"+barOneIdx+\" First val: \"+temp + \" Second index: \"+newHeight + \" Second val: \" + barTwoStyle.height);\r\n          //console.log(temp,newHeight);\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = temp;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = animations[i][2];\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx,num] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = num === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight,num] = animations[i];\r\n          let barOneStyle = arrayBars[barOneIdx].style;\r\n          let barTwoStyle = arrayBars[newHeight].style;\r\n          let temp = barOneStyle.height;\r\n          //console.log(\"First index: \"+barOneIdx+\" First val: \"+temp + \" Second index: \"+newHeight + \" Second val: \" + barTwoStyle.height);\r\n          //console.log(temp,newHeight);\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = temp;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort(){\r\n    const animations = getSelectionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = animations[i][2];\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx,num] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = num === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight,num] = animations[i];\r\n          let barOneStyle = arrayBars[barOneIdx].style;\r\n          let barTwoStyle = arrayBars[newHeight].style;\r\n          let temp = barOneStyle.height;\r\n          //console.log(\"First index: \"+barOneIdx+\" First val: \"+temp + \" Second index: \"+newHeight + \" Second val: \" + barTwoStyle.height);\r\n          //console.log(temp,newHeight);\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = temp;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSort(){\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = animations[i][2];\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx,num] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = num === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight,num] = animations[i];\r\n          let barOneStyle = arrayBars[barOneIdx].style;\r\n          let barTwoStyle = arrayBars[newHeight].style;\r\n          let temp = barOneStyle.height;\r\n          //console.log(\"First index: \"+barOneIdx+\" First val: \"+temp + \" Second index: \"+newHeight + \" Second val: \" + barTwoStyle.height);\r\n          //console.log(temp,newHeight);\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = temp;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  // testSortingAlgorithms() {\r\n  //   for (let i = 0; i < 100; i++) {\r\n  //     const array = [];\r\n  //     const length = randomIntFromInterval(1, 1000);\r\n  //     for (let i = 0; i < length; i++) {\r\n  //       array.push(randomIntFromInterval(-1000, 1000));\r\n  //     }\r\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  //     const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        { <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">Sorting Visualizer Tool</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <ButtonToolbar>\r\n                                <Button onClick={() => this.resetArray()} variant=\"outline-warning\" size=\"sm\">\r\n                                    Generate New Array\r\n                                </Button>\r\n                        </ButtonToolbar>\r\n                    </Nav>\r\n                    <Nav className=\"mr-auto\">\r\n                        <ButtonToolbar>\r\n                                <Button onClick={() => this.mergeSort()} variant=\"outline-danger\" size=\"sm\">\r\n                                    Merge Sort\r\n                                </Button>\r\n                        </ButtonToolbar>\r\n                    </Nav>\r\n                    <Nav className=\"mr-auto\">\r\n                        <ButtonToolbar>\r\n                                <Button onClick={() => this.quickSort()} variant=\"outline-success\" size=\"sm\">\r\n                                    Quick Sort\r\n                                </Button>\r\n                        </ButtonToolbar>\r\n                    </Nav>\r\n                    <Nav className=\"mr-auto\">\r\n                        <ButtonToolbar>\r\n                                <Button onClick={() => this.heapSort()} variant=\"outline-info\" size=\"sm\">\r\n                                    Heap Sort\r\n                                </Button>\r\n                        </ButtonToolbar>\r\n                    </Nav>\r\n                    <Nav className=\"mr-auto\">\r\n                        <ButtonToolbar>\r\n                                <Button onClick={() => this.bubbleSort()} variant=\"outline-light\" size=\"sm\">\r\n                                    Bubble Sort\r\n                                </Button>\r\n                        </ButtonToolbar>\r\n                    </Nav>\r\n                    <Nav className=\"mr-auto\">\r\n                        <ButtonToolbar>\r\n                                <Button onClick={() => this.selectionSort()} variant=\"outline-primary\" size=\"sm\">\r\n                                    Selection Sort\r\n                                </Button>\r\n                        </ButtonToolbar>\r\n                    </Nav>\r\n                    <Nav className=\"mr-auto\">\r\n                        <ButtonToolbar>\r\n                                <Button onClick={() => this.insertionSort()} variant=\"outline-warning\" size=\"sm\">\r\n                                    Insertion Sort\r\n                                </Button>\r\n                        </ButtonToolbar>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar> }\r\n          <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}></div>\r\n          ))}\r\n          {/* <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n          <button onClick={() => this.insertionSort()}>Insertion Sort</button>  \r\n          <button onClick={() => this.selectionSort()}>Insertion Sort</button> */}\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// {/* // function arraysAreEqual(arrayOne, arrayTwo) {\r\n// //   if (arrayOne.length !== arrayTwo.length) return false;\r\n// //   for (let i = 0; i < arrayOne.length; i++) {\r\n// //     if (arrayOne[i] !== arrayTwo[i]) {\r\n// //       return false;\r\n// //     }\r\n// //   }\r\n// //   return true;\r\n// // } */}","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n  }\r\n\r\n  function bubbleSortHelper(mainArray,animations){\r\n    var check = true;\r\n    for(let i = 0; i<mainArray.length && check; i++){\r\n        check = false;\r\n        for(let j = 0; j<mainArray.length -1 -i ; j++){\r\n          animations.push([j, j+1,1]);\r\n          animations.push([j, j+1,2]); // revert\r\n          if(mainArray[j] > mainArray[j+1]){\r\n            check = true; \r\n            animations.push([j,j+1,0]);\r\n            let temp = mainArray[j];\r\n            mainArray[j] = mainArray[j+1];\r\n            mainArray[j+1] = temp;\r\n          }\r\n        }\r\n      }\r\n    }","export function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    selectionSortHelper(array, animations);\r\n    return animations;\r\n  }\r\n\r\n  function selectionSortHelper(array,animations){\r\n       \r\n        for(let i = 0; i<array.length; i++){\r\n            let min = array[i];\r\n            let index = i;\r\n            for(let j = i+1; j<array.length; j++){\r\n                animations.push([j,index,1]);\r\n                animations.push([j,index,2]);\r\n                if(array[j] < min){  // compare\r\n                    min = array[j];\r\n                    index = j;\r\n                }\r\n            }\r\n            // swap operation\r\n            animations.push([i,index,0]);\r\n            let temp = array[i];\r\n            array[i] = min;\r\n            array[index] = temp; \r\n        }\r\n    }","export function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    insertionSortHelper(array, animations);\r\n    return animations;\r\n  }\r\n\r\n  function insertionSortHelper(array,animations){\r\n        for(let i = 0; i<array.length-1; i++){\r\n            for(let j = i+1; j>=1; j--){\r\n                animations.push([j,j-1,1]);\r\n                animations.push([j,j-1,2]);\r\n                if(array[j] < array[j-1]){ // compare\r\n                    // swap\r\n                    animations.push([j,j-1,0]);\r\n                    let temp = array[j];\r\n                    array[j] = array[j-1];\r\n                    array[j-1] = temp; \r\n                }else{\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\nimport { Navbar, NavItem, NavDropdown, MenuItem, Nav,Form,FormControl,Button,ButtonToolbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n  \n      <SortingVisualizer></SortingVisualizer>\n      \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}